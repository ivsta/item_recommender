import numpy as np
import pandas as pd
import sklearn
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)


#the data 

ratings = pd.read_csv("https://s3-us-west-2.amazonaws.com/recommender-tutorial/ratings.csv")

ratings.head()

movies = pd.read_csv("https://s3-us-west-2.amazonaws.com/recommender-tutorial/movies.csv")

movies.head()

#EDA and Data Cleaning of the dataset

ratings.columns

#number of ratings is 100836
ratings.shape

#there are 9724 unique movies 

ratings.movieId.nunique()

#there are 610 unique users 

ratings.userId.nunique()

len(ratings)

n_ratings = len(ratings)
n_movies = ratings['movieId'].nunique()
n_users = ratings['userId'].nunique()

print("Number of ratings:", n_ratings)
print("Number of unique movieId's:",  n_movies)
print("Number of unique users:", n_users)
print("Average number of ratings per user:", round(n_ratings/n_users, 2))
print("Average number of ratings per movie:", round(n_ratings/n_movies, 2))


user_freq = ratings[['userId', 'movieId']].groupby('userId').count().reset_index()
user_freq
user_freq.columns = ['userId', 'n_ratings']
user_freq
user_freq.sort_values(by= 'n_ratings')


print("Mean number of ratings for a given user:",user_freq['n_ratings'].mean())

sns.set_style("whitegrid")
plt.figure(figsize=(14,5))
plt.subplot(1,2,1)
ax = sns.countplot(x="rating", data=ratings, palette="plasma")
plt.title("Distribution of movie ratings")

plt.subplot(1,2,2)
ax = sns.kdeplot(user_freq['n_ratings'], shade=True, legend=False)
plt.axvline(user_freq['n_ratings'].mean(), color="k", linestyle="--")
plt.xlabel("# ratings per user")
plt.ylabel("density")
plt.title("Number of movies rated per user")
plt.show()

ratings.head()

mean_rating = ratings.groupby('movieId')[['rating']].mean()

mean_rating

mean_rating['rating'].idxmin()

mean_rating.loc[3604, :]

mean_rating['rating'].min()

mean_rating[mean_rating['rating'] == 0.5]

movies


C = movie_stats['count'].mean()
m = movie_stats['mean'].mean()

def bayesian_avg(ratings):
    bayesian_avg = (C*m+ratings.sum())/(C+ratings.count())
    return bayesian_avg
    
 
bayesian_avg_ratings = ratings.groupby('movieId')['rating'].agg(bayesian_avg).reset_index()

bayesian_avg_ratings.columns = ['movieId', 'bayesian_avg']
bayesian_avg_ratings
movie_stats = movie_stats.merge(bayesian_avg_ratings, on='movieId') 
 

movie_stats


movie_stats = movie_stats.merge(movies[['movieId', 'title']])
movie_stats
movie_stats.sort_values('bayesian_avg', ascending=False).head(10)

movie_stats.sort_values('bayesian_avg', ascending=True).head()

from scipy.sparse import csr_matrix

def create_X(df):
    """
    Generates a sparse matrix from ratings dataframe.
    
    Args:
        df: pandas dataframe
    
    Returns:
        X: sparse matrix
        user_mapper: dict that maps user id's to user indices
        user_inv_mapper: dict that maps user indices to user id's
        movie_mapper: dict that maps movie id's to movie indices
        movie_inv_mapper: dict that maps movie indices to movie id's
    """
    N = df['userId'].nunique()
    M = df['movieId'].nunique()

    user_mapper = dict(zip(np.unique(df["userId"]), list(range(N))))
    movie_mapper = dict(zip(np.unique(df["movieId"]), list(range(M))))
    
    user_inv_mapper = dict(zip(list(range(N)), np.unique(df["userId"])))
    movie_inv_mapper = dict(zip(list(range(M)), np.unique(df["movieId"])))
    
    user_index = [user_mapper[i] for i in df['userId']]
    movie_index = [movie_mapper[i] for i in df['movieId']]
    print(len(user_index))
    X = csr_matrix((df["rating"], (movie_index, user_index)), shape=(M, N))
    
    return X, user_mapper, movie_mapper, user_inv_mapper, movie_inv_mapper
    
 

ratings['movieId'].nunique()

ratings['userId'].nunique()

X, user_mapper, movie_mapper,user_inv_mapper, movie_inv_mapper = create_X(ratings)
X


movie_inv_mapper

X.shape
#[0]
X.shape
#[1]

X.shape[0]
X.shape[1]
X.count_nonzero()
X.shape[0]*X.shape[1]

sparsity = X.count_nonzero()/(X.shape[0]*X.shape[1])

print("Matrix sparsity:", round(sparsity*100,2))

from scipy.sparse import save_npz

save_npz('user_item_matrix.npz', X)

from sklearn.neighbors import NearestNeighbors

kNN = NearestNeighbors(n_neighbors=10,  metric='cosine')
kNN
kNN.fit(X)

movie_mapper;

movie_titles = dict(zip(movies['movieId'], movies['title']))
movie_titles

movie_title = movie_titles[1367]
movie_title


movie_mapper[1367]

movie_id = 1367
movie_ind = movie_mapper[movie_id]
movie_ind

movie_to_assess = X[movie_ind]
movie_to_assess

 neighbour = kNN.kneighbors(movie_to_assess, return_distance=False) #Finds the K-neighbors of a point.
 
 X
 
 neighbour
#.item(1)

movie_inv_mapper[1051]

neighbour_ids = []
for i in range(1,10):
    n = neighbour.item(i) #exctracting the 
    #print(n)
    neighbour_ids.append(movie_inv_mapper[n])
    
neighbour_ids

movie_titles[837]


 print("Because you watched:",movie_title)
print('-------------------------------------')
for i in neighbour_ids:
    print(movie_titles[i])
    
def recommended_movies(movie_id, X, k,
                        metric='cosine'):
    """
    Finds k-nearest neighbours for a given movie id.
    
    Args:
        movie_id: id of the movie of interest
        X: user-item utility matrix
        k: number of similar movies to retrieve
        metric: distance metric for kNN calculations
    
    Returns:
        list of k similar movie ID's
    """
    neighbour_ids = []
    
    movie_ind = movie_mapper[movie_id]
    movie_to_assess = X[movie_ind]
    kNN = NearestNeighbors(n_neighbors=k, 
                           metric=metric)
    kNN.fit(X)

    neighbour = kNN.kneighbors(movie_to_assess, return_distance=False)
    
    # We need to map each neighbour id with the right movie_id
    for i in range(1,k):
        n = neighbour.item(i) #exctracting the 
        neighbour_ids.append(movie_inv_mapper[n])    
    
    movie_titles = dict(zip(movies['movieId'], movies['title']))
    movie_title = movie_titles[movie_id]
    
    print(f"Because you watched", movie_title, "you would love:")
    print('-------------------------------------.----------')
    for i in neighbour_ids:
        print(movie_titles[i])
    
    #return neighbour_ids
    
 movie_id = 1367

recommended_movies(movie_id, X, k=5)
movies[movies.title.str.contains('Star Wars')]

movie_id = 5378

recommended_movies(movie_id, X, k=25)

movies[movies.title.str.contains('Seven')]

movie_id = 47

recommended_movies(movie_id, X, k=5)

movies[movies.title.str.contains('Kill Bill')]

movie_id = 7438

recommended_movies(movie_id, X, k=5)

movies[movies.title.str.contains('Gothika')]

movie_id = 6952

recommended_movies(movie_id, X, k=5)

movies[movies.title.str.contains('Godfather')]

movie_id = 1221

recommended_movies(movie_id, X, k=5)

movie_id = 100

recommended_movies(movie_id, X, k=20)







    


